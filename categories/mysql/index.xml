<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mysql on slow-wave blog</title>
    <link>http://slow-wave.github.io/categories/mysql/</link>
    <description>Recent content in mysql on slow-wave blog</description>
    <image>
      <url>http://slow-wave.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://slow-wave.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Nov 2022 16:24:19 +0900</lastBuildDate><atom:link href="http://slow-wave.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[MySQL] joins</title>
      <link>http://slow-wave.github.io/post/database/db_mysql_2/</link>
      <pubDate>Tue, 01 Nov 2022 16:24:19 +0900</pubDate>
      
      <guid>http://slow-wave.github.io/post/database/db_mysql_2/</guid>
      <description>Table간 Join을 수행해야할 때는 다음과 같이 집합의 개념을 활용하면 좋습니다. MySQL 언어로 아래의 모든 집합 관계에 대해서 표현해보려고 합니다.
MySQL JOINS 0. Full Outer Join [0] problem /* Input: Employees table: +-------------+----------+ | employee_id | name | +-------------+----------+ | 2 | Crew | | 4 | Haven | | 5 | Kristian | +-------------+----------+ Salaries table: +-------------+--------+ | employee_id | salary | +-------------+--------+ | 5 | 76071 | | 1 | 22517 | | 4 | 63539 | +-------------+--------+ Output: +-------------+ | employee_id | +-------------+ | 1 | | 2 | +-------------+ */ select Employees.</description>
    </item>
    
    <item>
      <title>[MySQL] 활용</title>
      <link>http://slow-wave.github.io/post/database/db_mysql_1/</link>
      <pubDate>Tue, 01 Nov 2022 16:21:10 +0900</pubDate>
      
      <guid>http://slow-wave.github.io/post/database/db_mysql_1/</guid>
      <description>0) Second Highest Salary (problem) Input: Employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+ Output: +---------------------+ | SecondHighestSalary | +---------------------+ | 200 | +---------------------+ solution 1
SELECT max(Salary) as SecondHighestSalary FROM Employee WHERE Salary &amp;lt; (SELECT max(Salary) FROM Employee); solution 2 (n-th rank 구할 때 적절할 듯)
WITH CTE AS (SELECT Salary, RANK () OVER (ORDER BY Salary desc) AS RANK_desc FROM Employee) SELECT MAX(salary) AS SecondHighestSalary FROM CTE WHERE RANK_desc = 2 with 절 동일한 SQL 문이 반복되어 성능을 높이기 위해 사용됨.</description>
    </item>
    
    <item>
      <title>[MySQL] 함수 정리</title>
      <link>http://slow-wave.github.io/post/database/db_mysql_0/</link>
      <pubDate>Fri, 21 Oct 2022 01:43:36 +0900</pubDate>
      
      <guid>http://slow-wave.github.io/post/database/db_mysql_0/</guid>
      <description>코딩테스트 연습 할 때 Leetcode 플랫폼을 많이 이용합니다. discussion을 보면 문제에 대한 각자의 코드와 설명이 있는데 많은 사람들이 vote와 댓글 기능을 이용해 피드백을 줍니다. 보통은 칭찬이 많이 달려있는 글을 위주로 참고합니다. 별로인 것에 대해서는 가차없는 피드백이 적혀있다는 것도 도움이 되는 것 같습니다. 또 댓글로 시간복잡도 등에 대해서 토론하는 부분도 있어서 유용합니다.
개인적으로 SQL을 공부 할 필요성을 느껴서 MySQL 함수 중심으로 problem과 code를 정리해봤습니다. discussion을 꼼꼼히 읽어서 어떻게 코딩하는 것이 좋은 방향인지도 알아보려고 합니다.</description>
    </item>
    
  </channel>
</rss>
